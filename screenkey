#!/usr/bin/python3
#^^^ not using env for process name

__version__  = "1.0"
__PKG_ID__   = "apps.screenkey"
__PKG_NAME__ = "screenkey"
__PKG_DESC__ = "Screencast your keys"

import os, sys

# path hack
__filepath__ = os.path.realpath(__file__)
PWD = os.path.dirname(__filepath__) + '/'
sys.path.append(PWD)
sys.path.append(PWD + '/Screenkey')

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib, Pango

import Screenkey
from Screenkey import home

import logging
import re
import argparse
import signal

FILE_INI = os.path.join(GLib.get_user_config_dir(), 'screenkey.json')

cnf = {
    'bak_mode'   : 'baked',
    'background' : [.2, .2, .2, .8 ],
    'compr_cnt'  : 3,
    'foreground' : [1, 1, 1, 1],
    'font_family': 'Sans',
    'font_weight': Pango.Weight.BOLD,
    'font_size'  : 24,
    'geometry'   : None,
    'ignore'     : [],
    'key_mode'   : 'composed',
    'mods_mode'  : 'normal',
    'mods_only'  : False,
    'multiline'  : False,
    'no_systray' : False,
    'opacity'    : 0.8,
    'persist'    : False,
    'position'   : 'bottom',
    'recent_thr' : 0.2,
    'screen'     : 0,
    'timeout'    : 2.5,
    'vis_shift'  : False,
    'vis_space'  : True,
}


class TrayIcon(Gtk.StatusIcon):
    def __init__(self, app):
        Gtk.StatusIcon.__init__(self)
        self.app = app
        self.makeWidget()
        self.connect("activate", self.toggle_enable)
        self.connect("popup_menu", self.on_secondary_click)


    def makeWidget(self):
        self.set_from_icon_name("preferences-desktop-keyboard-shortcuts")
        self.set_title(__PKG_NAME__)
        # self.set_name(__PKG_ID__ + ".tray")
        ## BUG: don't use it ^^^ will create Gdk-CRITICAL
        self.set_tooltip_text(__PKG_DESC__)
        self.set_has_tooltip(True)
        self.set_visible(True)

        self.menu = Gtk.Menu()

        self.menuitem_enable = Gtk.CheckMenuItem("Enable / Disable")
        self.menuitem_enable.set_active(True)
        self.menuitem_enable.connect("toggled", self.toggle_enable)
        self.menu.append(self.menuitem_enable)

        menuitem_preferences = Gtk.MenuItem("Preferences")
        # menuitem_preferences.connect("activate", self.on_preferences_dialog)
        self.menu.append(menuitem_preferences)

        menuitem_about =  Gtk.MenuItem("About")
        menuitem_about.connect("activate", lambda *a: create_about_dialog(self.app.home))
        self.menu.append(menuitem_about)

        menuitem_separator = Gtk.SeparatorMenuItem()
        self.menu.append(menuitem_separator)

        menuitem_quit = Gtk.MenuItem("Quit")
        # menuitem_quit.connect("activate", lambda *a: self.app.quit())
        menuitem_quit.connect("activate", self.quit)
        self.menu.append(menuitem_quit)
        self.menu.show_all()


    def quit(self, *args):
        self.app.home.quit()
        self.app.quit()
        exit()


    def toggle_enable(self, widget):
        if self.menuitem_enable.get_active():
            # self.logger.debug("Screenkey disabled.")
            # self.labelmngr.stop()
            return

        # self.logger.debug("Screenkey enabled.")
        # self.restart_labelmanager()
        # self.app.home.hide()


    def on_secondary_click(self, widget, button, time):
        self.menu.popup(None, None, None, self, 3, time)


class App(Gtk.Application):
    def __init__(self, opts):
        Gtk.Application.__init__(
            self,
            application_id = __PKG_ID__,
        )

        self.opts = opts
        self.home = None
        self.connect("shutdown", self.on_shutdown)
        ## BUG: dont use =do_shutdown= virtual func, creates show
        ## CRITIAL error messages


    def do_startup(self):
        Gtk.Application.do_startup(self)
        # self.cnf = setting.main(PWD)


    def do_activate(self):
        if self.home == None:
            # Initialize logger
            logging.basicConfig(level=logging.DEBUG)
            logger = logging.getLogger(__PKG_NAME__)

            self.home = home.Home(self.opts, logger)
            self.add_window(self.home)
            if not self.opts['no_systray']:
                self.tray = TrayIcon(self)

        # self.home.show()
        # self.home.parse_geometry(self.cnf.gui['geometry'])
        # self.home.present()


    def on_shutdown(self, app_obj):
        pass
        # if self.home and self.cnf.preferences['enable-history-file']:
        #     print("shutdown: update history")
        #     with open(os.path.expanduser(setting.FILE_HIST), mode='w+') as fp:
        #         fp.write('\n'.join(self.home.searchbar.entry.HISTORY))


    def load_state(self):
        """Load stored options"""
        options = None
        try:
            with open(self.STATE_FILE, 'r') as f:
                options = Options(json.load(f))
                self.logger.debug("Options loaded.")
        except IOError:
            self.logger.debug("file %s does not exists." % self.STATE_FILE)
        except ValueError:
            self.logger.debug("file %s is invalid." % self.STATE_FILE)

        return options


    def store_state(self, options):
        """Store options"""
        try:
            with open(self.STATE_FILE, 'w') as f:
                json.dump(options, f)
                self.logger.debug("Options saved.")
        except IOError:
            self.logger.debug("Cannot open %s." % self.STATE_FILE)


def parse_args():
    ap = argparse.ArgumentParser(
        prog = Screenkey.APP_NAME,
        description = Screenkey.APP_DESC
    )

    ap.add_argument(
        "--no-systray",
        action = "store_true",
        default = False,
        help = _("do not create system tray icon")
    )

    ap.add_argument(
        "--persist",
        action = 'store_true',
        default = None,
        help = _("make window persistent")
    )

    ap.add_argument(
        "--vis-shift",
        action = "store_true",
        default = None,
        help = _("always show Shift when modifiers are pressed")
    )

    ap.add_argument(
        "--no-whitespace",
        dest = 'vis_space',
        action = "store_false",
        default = None,
        help = _("disable visualization of whitespace")
    )

    ap.add_argument(
        "--show-settings",
        action = "store_true",
        help = _("show settings dialog on start")
    )

    ap.add_argument(
        "--scr",
        dest = 'screen',
        type = int,
        default = 0,
        help=_("show on the specified screen number")
    )

    ap.add_argument(
        "--ignore",
        action = 'append',
        metavar = 'KeySym',
        default = [],
        help = _("Ignore the specified KeySym")
    )

    ap.add_argument(
        "--compr-cnt",
        type = int,
        metavar = 'COUNT',
        help = _("Compress key repeats after the specified count")
    )

    return ap


def create_about_dialog(parent=None):
    about = Gtk.AboutDialog(parent=parent)
    about.set_position(Gtk.WindowPosition.CENTER)
    about.set_icon_name('preferences-desktop-keyboard-shortcuts')
    about.set_program_name(__PKG_NAME__)
    about.set_version(__version__)
    about.set_copyright("""
    Copyright(c) 2010-2012: Pablo Seminario <pabluk@gmail.com>
    Copyright(c) 2015-2016: wave++ "Yuri D'Elia" <wavexx@thregr.org>
    """)
    about.set_documenters(
        ["José María Quiroga <pepelandia@gmail.com>"]
    )
    about.set_website(Screenkey.APP_URL)

    # about.connect("response", about.hide_on_delete)
    # about.connect("delete-event", about.hide_on_delete)
    # about.set_authors(open(PWD + '../AUTHORS').read().splitlines())
    # about.set_license(open(PWD + '../LICENSE').read())
    about.run()
    about.destroy()



def main():
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    ap = parse_args()
    opts, *z = ap.parse_known_args()

    for k in cnf.keys():
        if not hasattr(opts, k): continue
        val = getattr(opts, k)
        if val is None: continue
        cnf[k] = val

    return App(cnf)


if __name__ == "__main__":
    app = main()
    app.run()
